import rclpy
from rclpy.node import Node
from nav_msgs.msg import OccupancyGrid
from geometry_msgs.msg import PoseStamped
from actionlib_msgs.msg import GoalStatus
from nav2_msgs.action import NavigateToPose
from rclpy.action import ActionClient
import numpy as np
from visualization_msgs.msg import Marker, MarkerArray
import random 
import tf2_ros
import tf2_geometry_msgs
from threading import Timer
import math

class MapSubscriber(Node):

    def __init__(self):
        super().__init__('map_subscriber')
        self.marker_pub = self.create_publisher(MarkerArray, 'frontiers', 1)
        self.goal_pub = self.create_publisher(PoseStamped, '/goal_pose', 1)
        self.robot_pose_pub = self.create_publisher(PoseStamped, '/robot_pose', 1)
        self.subscription = self.create_subscription(OccupancyGrid,'/map',self.listener_callback,10)
        self.tf_buffer = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buffer, self)
        self.subscription
        self.action_client = ActionClient(self, NavigateToPose, 'navigate_to_pose')
        self.moving_to_goal = False
        self.goal_msg = None
        self.map_msg = None
        self.frontiers = None
        self.robot_pose = None
        self.visited_frontiers = []
        self.frontiers = []

    def listener_callback(self, msg):

        #get the robot pose
        try:
            transform = self.tf_buffer.lookup_transform('map', 'base_link', rclpy.time.Time())
        except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException) as e:
            self.get_logger().error('TF2 error: %s' % str(e))
            return
        self.robot_pose = transform.transform.translation

        #check if the goal has been reached
        if self.moving_to_goal and self.robot_pose.x != None:

            # Calculate the distance between the robot's pose and the target pose
            dx = self.robot_pose.x - self.goal_msg.pose.position.x
            dy = self.robot_pose.y - self.goal_msg.pose.position.y
            distance = math.sqrt(dx**2 + dy**2)

            if distance<0.5:
                print("robot is close to the target point")
                # Cancel the timers when the goal is reached
                self.timer.cancel()
                self.moving_to_goal = False
        
        # Only send a new goal if the robot is not currently moving towards a goal
        if not self.moving_to_goal and self.robot_pose.x != None:
            self.get_logger().info('sending goal...')

            #update the frontiers 
            self.frontiers = find_frontiers(msg)
            frontiers=self.frontiers

            #remove the visited ones
            for i in range(len(self.visited_frontiers)):
                if self.visited_frontiers[i] in frontiers:
                    frontiers.remove(self.visited_frontiers[i])

            #check the frontiers of the map and publish them
            self.get_logger().info('Found %d frontiers' % len(frontiers))
            markers = MarkerArray()
            for i, (x, y) in enumerate(frontiers):
                marker = Marker()
                marker.header.frame_id = 'map'
                marker.header.stamp = self.get_clock().now().to_msg()
                marker.id = i
                marker.type = marker.CUBE
                marker.action = marker.ADD
                marker.pose.position.x = x * msg.info.resolution + msg.info.origin.position.x
                marker.pose.position.y = y * msg.info.resolution + msg.info.origin.position.y
                marker.pose.position.z = 0.1
                marker.pose.orientation.w = 1.0
                marker.scale.x = msg.info.resolution
                marker.scale.y = msg.info.resolution
                marker.scale.z = 0.1
                marker.color.a = 1.0
                marker.color.r = 0.0
                marker.color.g = 1.0
                marker.color.b = 0.0
                markers.markers.append(marker)
            self.marker_pub.publish(markers)

            # Create a goal message
            goal_msg = NavigateToPose.Goal()
            goal_pose = PoseStamped()
            robot_pose = PoseStamped()
            goal_pose.header.frame_id = 'map'

            if frontiers:
                # Initialize the minimum distance and the selected index
                selected_index = -1

                # Iterate over the frontiers
                for i in range(len(frontiers)):

                    # Calculate the distance to the frontier
                    dx = (float(frontiers[i][0]) * msg.info.resolution + msg.info.origin.position.x)- self.robot_pose.x
                    dy = (float(frontiers[i][1]) * msg.info.resolution + msg.info.origin.position.y) - self.robot_pose.y
                    distance = math.sqrt(dx**2 + dy**2)

                    # If the distance is less than x meters and less than the current minimum, select this frontier
                    if distance < 1.0 :
                        self.selected_index = i
                        print(f"distance:{distance}")
                        break

                print(f"robot pose:{self.robot_pose.x},{self.robot_pose.y}")
                print(f"target pose:{self.frontiers[self.selected_index][0] * msg.info.resolution + msg.info.origin.position.x },{self.frontiers[self.selected_index][1] * msg.info.resolution + msg.info.origin.position.y}")

                # If no frontier was found within x meters, select a random one
                if selected_index == -1:
                    print("RANDOM POSE")
                    selected_index = random.randint(0, len(frontiers) - 1)

                # Set the goal pose to the selected frontier
                goal_pose.pose.position.x = float(frontiers[selected_index][0]) * msg.info.resolution + msg.info.origin.position.x
                goal_pose.pose.position.y = float(frontiers[selected_index][1]) * msg.info.resolution + msg.info.origin.position.y
                goal_pose.pose.orientation.w = 1.0  
                goal_msg.pose = goal_pose
                self.action_client.wait_for_server()
                self.send_goal_future = self.action_client.send_goal_async(goal_msg)

                # Set the pose of the robot
                robot_pose.pose.position.x = self.robot_pose.x
                robot_pose.pose.position.y = self.robot_pose.y
                robot_pose.pose.orientation.w = 1.0  

                # Start a timer that will cancel the goal after 10 seconds
                self.timer = Timer(50.0, self.cancel_goal)
                self.timer.start()

                # Publish the goal pose
                self.goal_pub.publish(goal_pose)

                # Publish the robot pose
                self.robot_pose_pub.publish(robot_pose)

                # Set the moving_to_goal flag to True
                self.moving_to_goal = True

            else:
                self.get_logger().info('No frontiers found')
                self.moving_to_goal = False

    def cancel_goal(self):
        # Add the selected frontier to the list
        self.visited_frontiers.append(self.frontiers[self.selected_index])
        self.timer.cancel()
        goal_status = self.send_goal_future.result() 
        if goal_status.status == 6: #GoalStatus.ABORTED
            print("Cancelling goal...")
            self.moving_to_goal = False
        
def find_frontiers(map_msg):
    # Convert the map to a 2D numpy array for easier processing
    map_array = np.array(map_msg.data).reshape((map_msg.info.height, map_msg.info.width))

    # Initialize an empty list to hold the frontier cells
    frontiers = []

    # Iterate over all cells in the map
    for y in range(map_msg.info.height):
        for x in range(map_msg.info.width):
            may_be_frontier = False
            may_be_wall = False
            # Check if the cell is known and free
            if map_array[y, x] >= 20:
                # Check the neighboring cells
                for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
                    nx, ny = x + dx, y + dy
                    # If the neighbor is within the map bounds and is unknown, add the current cell to the frontiers
                    if (0 <= nx < map_msg.info.width and 0 <= ny < map_msg.info.height and map_array[ny, nx] <= 4):
                        #raise a flag 
                        may_be_frontier = True
                        break  
                #remove from the frontiers the cells that are too close to the wall
                if may_be_frontier:
                    for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
                        nx, ny = x + dx, y + dy
                        # If the neighbor is within the map bounds and is occupied, add the current cell to the walls
                        if (0 <= nx < map_msg.info.width and 0 <= ny < map_msg.info.height and map_array[ny, nx] > 55):
                            may_be_wall = True
                            break    
                    if not may_be_wall:
                        frontiers.append((x, y))

    return frontiers

    

def main(args=None):
    rclpy.init(args=args)

    map_subscriber = MapSubscriber()

    rclpy.spin(map_subscriber)

    map_subscriber.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()